
hp@LAPTOP-4GLPU5S4 MINGW64 ~/Desktop/GIT Projects (master)
$ git --version
git version 2.35.1.windows.1

hp@LAPTOP-4GLPU5S4 MINGW64 ~/Desktop/GIT Projects (master)
$ git config --global user.name "Anish Sinha"

hp@LAPTOP-4GLPU5S4 MINGW64 ~/Desktop/GIT Projects (master)
$ git config --global user.email "anish28april@gmail.com"

hp@LAPTOP-4GLPU5S4 MINGW64 ~/Desktop/GIT Projects (master)
$ ^C

hp@LAPTOP-4GLPU5S4 MINGW64 ~/Desktop/GIT Projects (master)
$ git config --user.name
error: unknown option `user.name'
usage: git config [<options>]

Config file location
    --global              use global config file
    --system              use system config file
    --local               use repository config file
    --worktree            use per-worktree config file
    -f, --file <file>     use given config file
    --blob <blob-id>      read config from given blob object

Action
    --get                 get value: name [value-pattern]
    --get-all             get all values: key [value-pattern]
    --get-regexp          get values for regexp: name-regex [value-pattern]
    --get-urlmatch        get value specific for the URL: section[.var] URL
    --replace-all         replace all matching variables: name value [value-pattern]
    --add                 add a new variable: name value
    --unset               remove a variable: name [value-pattern]
    --unset-all           remove all matches: name [value-pattern]
    --rename-section      rename section: old-name new-name
    --remove-section      remove a section: name
    -l, --list            list all
    --fixed-value         use string equality when comparing values to 'value-pattern'
    -e, --edit            open an editor
    --get-color           find the color configured: slot [default]
    --get-colorbool       find the color setting: slot [stdout-is-tty]

Type
    -t, --type <>         value is given this type
    --bool                value is "true" or "false"
    --int                 value is decimal number
    --bool-or-int         value is --bool or --int
    --bool-or-str         value is --bool or string
    --path                value is a path (file or directory name)
    --expiry-date         value is an expiry date

Other
    -z, --null            terminate values with NUL byte
    --name-only           show variable names only
    --includes            respect include directives on lookup
    --show-origin         show origin of config (file, standard input, blob, command line)
    --show-scope          show scope of config (worktree, local, global, system, command)
    --default <value>     with --get, use default value when missing entry


hp@LAPTOP-4GLPU5S4 MINGW64 ~/Desktop/GIT Projects (master)
$ git config --global user.name
Anish Sinha

hp@LAPTOP-4GLPU5S4 MINGW64 ~/Desktop/GIT Projects (master)
$ git config --global user.email
anish28april@gmail.com

hp@LAPTOP-4GLPU5S4 MINGW64 ~/Desktop/GIT Projects (master)
$ git init
Reinitialized existing Git repository in C:/Users/hp/Desktop/GIT Projects/.git/

hp@LAPTOP-4GLPU5S4 MINGW64 ~/Desktop/GIT Projects (master)
$ ls -a
 ./   ../   .git/  'FMEP Research'/   app.js   pikachu.html

hp@LAPTOP-4GLPU5S4 MINGW64 ~/Desktop/GIT Projects (master)
$ git add roy.html
fatal: pathspec 'roy.html' did not match any files

hp@LAPTOP-4GLPU5S4 MINGW64 ~/Desktop/GIT Projects (master)
$ git status
On branch master

No commits yet

Untracked files:
  (use "git add <file>..." to include in what will be committed)
        FMEP Research/
        app.js
        pikachu.html

nothing added to commit but untracked files present (use "git add" to track)

hp@LAPTOP-4GLPU5S4 MINGW64 ~/Desktop/GIT Projects (master)
$ git add app.js

hp@LAPTOP-4GLPU5S4 MINGW64 ~/Desktop/GIT Projects (master)
$ git status
On branch master

No commits yet

Changes to be committed:
  (use "git rm --cached <file>..." to unstage)
        new file:   app.js

Untracked files:
  (use "git add <file>..." to include in what will be committed)
        FMEP Research/
        pikachu.html


hp@LAPTOP-4GLPU5S4 MINGW64 ~/Desktop/GIT Projects (master)
$ git add pikachu.html

hp@LAPTOP-4GLPU5S4 MINGW64 ~/Desktop/GIT Projects (master)
$ git status
On branch master

No commits yet

Changes to be committed:
  (use "git rm --cached <file>..." to unstage)
        new file:   app.js
        new file:   pikachu.html

Untracked files:
  (use "git add <file>..." to include in what will be committed)
        FMEP Research/


hp@LAPTOP-4GLPU5S4 MINGW64 ~/Desktop/GIT Projects (master)
$ git commit -m "initail commit"
[master (root-commit) 2f49a3a] initail commit
 2 files changed, 0 insertions(+), 0 deletions(-)
 create mode 100644 app.js
 create mode 100644 pikachu.html

hp@LAPTOP-4GLPU5S4 MINGW64 ~/Desktop/GIT Projects (master)
$ git log
commit 2f49a3a948bc7f02e60591e18c8f2a162f10d15a (HEAD -> master)
Author: Anish Sinha <anish28april@gmail.com>
Date:   Wed Feb 2 17:55:00 2022 +0530

    initail commit

hp@LAPTOP-4GLPU5S4 MINGW64 ~/Desktop/GIT Projects (master)
$ git add FMEP Research/
fatal: pathspec 'FMEP' did not match any files

hp@LAPTOP-4GLPU5S4 MINGW64 ~/Desktop/GIT Projects (master)
$ touch happy.cpp

hp@LAPTOP-4GLPU5S4 MINGW64 ~/Desktop/GIT Projects (master)
$ git status
On branch master
Untracked files:
  (use "git add <file>..." to include in what will be committed)
        FMEP Research/
        happy.cpp

nothing added to commit but untracked files present (use "git add" to track)

hp@LAPTOP-4GLPU5S4 MINGW64 ~/Desktop/GIT Projects (master)
$ git add happy.cpp

hp@LAPTOP-4GLPU5S4 MINGW64 ~/Desktop/GIT Projects (master)
$ git commit -m "Adding happy.cpp"
[master 33cd38e] Adding happy.cpp
 1 file changed, 0 insertions(+), 0 deletions(-)
 create mode 100644 happy.cpp

hp@LAPTOP-4GLPU5S4 MINGW64 ~/Desktop/GIT Projects (master)
$ git log
commit 33cd38e4f106cfd42941e2887cfce87cdd9ae125 (HEAD -> master)
Author: Anish Sinha <anish28april@gmail.com>
Date:   Wed Feb 2 18:04:42 2022 +0530

    Adding happy.cpp

commit 2f49a3a948bc7f02e60591e18c8f2a162f10d15a
Author: Anish Sinha <anish28april@gmail.com>
Date:   Wed Feb 2 17:55:00 2022 +0530

    initail commit

hp@LAPTOP-4GLPU5S4 MINGW64 ~/Desktop/GIT Projects (master)
$ git edit
git: 'edit' is not a git command. See 'git --help'.

The most similar command is
        init

hp@LAPTOP-4GLPU5S4 MINGW64 ~/Desktop/GIT Projects (master)
$ git --help
usage: git [--version] [--help] [-C <path>] [-c <name>=<value>]
           [--exec-path[=<path>]] [--html-path] [--man-path] [--info-path]
           [-p | --paginate | -P | --no-pager] [--no-replace-objects] [--bare]
           [--git-dir=<path>] [--work-tree=<path>] [--namespace=<name>]
           [--super-prefix=<path>] [--config-env=<name>=<envvar>]
           <command> [<args>]

These are common Git commands used in various situations:

start a working area (see also: git help tutorial)
   clone     Clone a repository into a new directory
   init      Create an empty Git repository or reinitialize an existing one

work on the current change (see also: git help everyday)
   add       Add file contents to the index
   mv        Move or rename a file, a directory, or a symlink
   restore   Restore working tree files
   rm        Remove files from the working tree and from the index

examine the history and state (see also: git help revisions)
   bisect    Use binary search to find the commit that introduced a bug
   diff      Show changes between commits, commit and working tree, etc
   grep      Print lines matching a pattern
   log       Show commit logs
   show      Show various types of objects
   status    Show the working tree status

grow, mark and tweak your common history
   branch    List, create, or delete branches
   commit    Record changes to the repository
   merge     Join two or more development histories together
   rebase    Reapply commits on top of another base tip
   reset     Reset current HEAD to the specified state
   switch    Switch branches
   tag       Create, list, delete or verify a tag object signed with GPG

collaborate (see also: git help workflows)
   fetch     Download objects and refs from another repository
   pull      Fetch from and integrate with another repository or a local branch
   push      Update remote refs along with associated objects

'git help -a' and 'git help -g' list available subcommands and some
concept guides. See 'git help <command>' or 'git help <concept>'
to read about a specific subcommand or concept.
See 'git help git' for an overview of the system.

hp@LAPTOP-4GLPU5S4 MINGW64 ~/Desktop/GIT Projects (master)
$ ^C

hp@LAPTOP-4GLPU5S4 MINGW64 ~/Desktop/GIT Projects (master)
$ ^C

hp@LAPTOP-4GLPU5S4 MINGW64 ~/Desktop/GIT Projects (master)
$ git checkout 2f49a3a948bc7f02e60591e18c8f2a162f10d15a
Note: switching to '2f49a3a948bc7f02e60591e18c8f2a162f10d15a'.

You are in 'detached HEAD' state. You can look around, make experimental
changes and commit them, and you can discard any commits you make in this
state without impacting any branches by switching back to a branch.

If you want to create a new branch to retain commits you create, you may
do so (now or later) by using -c with the switch command. Example:

  git switch -c <new-branch-name>

Or undo this operation with:

  git switch -

Turn off this advice by setting config variable advice.detachedHead to false

HEAD is now at 2f49a3a initail commit

hp@LAPTOP-4GLPU5S4 MINGW64 ~/Desktop/GIT Projects ((2f49a3a...))
$ git checkout master
Previous HEAD position was 2f49a3a initail commit
Switched to branch 'master'

hp@LAPTOP-4GLPU5S4 MINGW64 ~/Desktop/GIT Projects (master)
$
